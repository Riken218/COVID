try:
    from Work import*
except:
    from Workspace import*
print('\n')


#confirmed = 'https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_19-covid-Confirmed.csv&filename=time_series_2019-ncov-Confirmed.csv'
#confirmed = 'https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv'
confirmed = 'https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
cases = pd.read_csv(confirmed)

#dead = 'https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_19-covid-Deaths.csv&filename=time_series_2019-ncov-Deaths.csv'
#dead = 'https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&filename=time_series_covid19_deaths_global.csv'
dead = 'https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'
deaths = pd.read_csv(dead)

dates = ['1/22/20','1/23/20','1/24/20','1/25/20','1/26/20','1/27/20','1/28/20','1/29/20','1/30/20','1/31/20',
         '2/1/20','2/2/20','2/3/20','2/4/20','2/5/20','2/6/20','2/7/20','2/8/20','2/9/20','2/10/20','2/11/20',
         '2/12/20','2/13/20','2/14/20','2/15/20','2/16/20','2/17/20','2/18/20','2/19/20','2/20/20','2/21/20',
         '2/22/20','2/23/20','2/24/20','2/25/20','2/26/20','2/27/20','2/28/20','2/29/20','3/1/20','3/2/20',
         '3/3/20','3/4/20','3/5/20','3/6/20','3/7/20','3/8/20','3/9/20','3/10/20','3/11/20','3/12/20','3/13/20',
         '3/14/20','3/15/20','3/16/20','3/17/20','3/18/20','3/19/20','3/20/20','3/21/20','3/22/20','3/23/20',
         '3/24/20','3/25/20','3/26/20','3/27/20','3/28/20','3/29/20','3/30/20','3/31/20','4/1/20','4/2/20',
         '4/3/20','4/4/20','4/5/20','4/6/20','4/7/20','4/8/20','4/9/20','4/10/20','4/11/20','4/12/20','4/13/20',
         '4/14/20','4/15/20','4/16/20','4/17/20','4/18/20','4/19/20','4/20/20','4/21/20','4/22/20','4/23/20',
         '4/24/20','4/25/20','4/26/20','4/27/20','4/28/20','4/29/20','4/30/20','5/1/20','5/2/20','5/3/20',
         '5/4/20','5/5/20','5/6/20','5/7/20','5/8/20','5/9/20','5/10/20','5/11/20','5/12/20','5/13/20','5/14/20',
         '5/15/20','5/16/20','5/17/20','5/18/20','5/19/20','5/20/20','5/21/20','5/22/20','5/23/20','5/24/20',
         '5/25/20','5/26/20','5/27/20','5/28/20','5/29/20','5/30/20','5/31/20','6/1/20','6/2/20','6/3/20',
         '6/4/20','6/5/20','6/6/20','6/7/20','6/8/20','6/9/20','6/10/20','6/11/20','6/12/20','6/13/20','6/14/20',
         '6/15/20','6/16/20','6/17/20','6/18/20','6/19/20','6/20/20','6/21/20','6/22/20','6/23/20','6/24/20',
         '6/25/20','6/26/20','6/27/20','6/28/20','6/29/20','6/30/20','7/1/20','7/2/20','7/3/20',
         '7/4/20','7/5/20','7/6/20','7/7/20','7/8/20','7/9/20','7/10/20','7/11/20','7/12/20','7/13/20','7/14/20',
         '7/15/20','7/16/20','7/17/20','7/18/20','7/19/20','7/20/20','7/21/20','7/22/20','7/23/20','7/24/20',
         '7/25/20','7/26/20','7/27/20','7/28/20','7/29/20','7/30/20','7/31/20','8/1/20','8/2/20','8/3/20',
         '8/4/20','8/5/20','8/6/20','8/7/20','8/8/20','8/9/20','8/10/20','8/11/20','8/12/20','8/13/20','8/14/20',
         '8/15/20','8/16/20','8/17/20','8/18/20','8/19/20','8/20/20','8/21/20','8/22/20','8/23/20','8/24/20',
         '8/25/20','8/26/20','8/27/20','8/28/20','8/29/20','8/30/20','8/31/20','9/1/20','9/2/20','9/3/20',
         '9/4/20','9/5/20','9/6/20','9/7/20','9/8/20','9/9/20','9/10/20','9/11/20','9/12/20','9/13/20','9/14/20',
         '9/15/20','9/16/20','9/17/20','9/18/20','9/19/20','9/20/20','9/21/20','9/22/20','9/23/20','9/24/20',
         '9/25/20','9/26/20','9/27/20','9/28/20','9/29/20','9/30/20']

date_list = cases.columns
date_list = date_list[4:]
dates_labels = dates

#print(cases.sum(axis=0))

US_df = cases[cases['Country/Region']=='US']
Italy_df = cases[cases['Country/Region']=='Italy']
China_df = cases[cases['Country/Region']=='China']
Ex_China_df = cases[cases['Country/Region']!='China']
SK_df = cases[cases['Country/Region']=='Korea, South']
All_df = cases

US_cases = np.array(list(US_df.sum(axis=0))[4:])
Italy_cases = np.array(list(Italy_df.sum(axis=0))[4:])
China_cases = np.array(list(China_df.sum(axis=0))[4:])
Excluding_China_cases = np.array(list(Ex_China_df.sum(axis=0))[2:])
SK_cases = np.array(list(SK_df.sum(axis=0))[4:])
All_cases = np.array(list(All_df.sum(axis=0))[2:])



#print(deaths.sum(axis=0))

US_df = deaths[deaths['Country/Region']=='US']
Italy_df = deaths[deaths['Country/Region']=='Italy']
China_df = deaths[deaths['Country/Region']=='China']
Ex_China_df = deaths[deaths['Country/Region']!='China']
SK_df = deaths[deaths['Country/Region']=='Korea, South']
All_df = deaths

US_deaths = np.array(list(US_df.sum(axis=0))[4:])
Italy_deaths = np.array(list(Italy_df.sum(axis=0))[4:])
China_deaths = np.array(list(China_df.sum(axis=0))[4:])
Excluding_China_deaths = np.array(list(Ex_China_df.sum(axis=0))[2:])
SK_deaths = np.array(list(SK_df.sum(axis=0))[4:])
All_deaths = np.array(list(All_df.sum(axis=0))[2:])

print(date_list[-1])

dates_graph  = date_list

frmt = 's'

extn = 2

x_dates = np.arange(len(date_list))
x = np.linspace(0,len(date_list)*extn,int(1E4))


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.suptitle('Confirmed deaths')
plt.plot(dates_graph,US_deaths,label='US')
plt.plot(dates_graph,Italy_deaths,label='Italy')
plt.plot(dates_graph,China_deaths,label='China')
#plt.plot(dates_graph,Excluding_China_deaths,label='All but China')
plt.plot(dates_graph,SK_deaths,label='South Korea')
plt.yscale('log')
plt.legend()
plt.show()
plt.clf()

#Data Fitting stuff

def logistic(x,amp,rate,center,nu):
    return amp*(1+M.e**(-rate*(x-center)))**(-1/nu)



All_curve = curve_fit(logistic,x_dates,All_deaths,p0=[1E8,0.2,1E2,1],bounds=(0,[7.5E9,1E1,1000,1E3]),maxfev=1E3)[0]

res_All = All_deaths-logistic(x_dates,*All_curve)
ss_res_All = np.sum(res_All**2)
ss_tot_All = np.sum((All_deaths-np.mean(All_deaths))**2)
r_2_All = 1 - ss_res_All/ss_tot_All


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.plot(date_list,All_deaths,frmt)
plt.plot(x,logistic(x,*All_curve))
plt.yscale('log')
plt.suptitle('All Deaths')
plt.show()
print('{:.0f} people with a turnaround at {:.1f} days and a growth rate of {:.4f}'.format(round(All_curve[0],-1),All_curve[2],All_curve[1]))
print('All R^2 = {:.4f}'.format(r_2_All))
plt.clf()


China_curve = curve_fit(logistic,x_dates,China_deaths,p0=[1E4,0.2,20,1],bounds=(0,[1E6,1E1,1000,1E3]))[0]

res_China = China_deaths-logistic(x_dates,*China_curve)
ss_res_China = np.sum(res_China**2)
ss_tot_China = np.sum((China_deaths-np.mean(China_deaths))**2)
r_2_China = 1 - ss_res_China/ss_tot_China


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.plot(date_list,China_deaths,frmt)
plt.plot(x,logistic(x,*China_curve))
plt.suptitle('China Deaths')
plt.show()
print('{:.0f} people with a turnaround at {:.1f} days and a growth rate of {:.4f}'.format(round(China_curve[0],-1),China_curve[2],China_curve[1]))
print('China R^2 = {:.4f}'.format(r_2_China))
plt.clf()


US_curve = curve_fit(logistic,x_dates,US_deaths,p0=[1E6,0.2,1E2,1],bounds=(0,[3.5E8,1E1,1000,1E3]),maxfev=2E3)[0]

res_US = US_deaths-logistic(x_dates,*US_curve)
ss_res_US = np.sum(res_US**2)
ss_tot_US = np.sum((US_deaths-np.mean(US_deaths))**2)
r_2_US = 1 - ss_res_US/ss_tot_US


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.plot(date_list,US_deaths,frmt)
plt.plot(x,logistic(x,*US_curve))
plt.suptitle('US Deaths')
plt.yscale('log')
plt.show()
print('{:.0f} people with a turnaround at {:.1f} days and a growth rate of {:.4f}'.format(round(US_curve[0],-3),US_curve[2],US_curve[1]))
print('US R^2 = {:.4f}'.format(r_2_US))
plt.clf()


Italy_curve = curve_fit(logistic,x_dates,Italy_deaths,p0=[1E4,0.2,60,1],bounds=(0,[1E8,1E1,1000,1E3]))[0]

res_Italy = Italy_deaths-logistic(x_dates,*Italy_curve)
ss_res_Italy = np.sum(res_Italy**2)
ss_tot_Italy = np.sum((Italy_deaths-np.mean(Italy_deaths))**2)
r_2_Italy = 1 - ss_res_Italy/ss_tot_Italy


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.plot(date_list,Italy_deaths,frmt)
plt.plot(x,logistic(x,*Italy_curve))
plt.suptitle('Italy Deaths')
plt.show()
print('Italy R^2 = {:.4f}'.format(r_2_Italy))
print('{:.0f} people with a turnaround at {:.1f} days and a growth rate of {:.4f}'.format(round(Italy_curve[0],-1),Italy_curve[2],Italy_curve[1]))
plt.clf()


Excluding_China_curve = curve_fit(logistic,x_dates,Excluding_China_deaths,p0=[1E5,0.2,60,1],bounds=(0,[7E9,1E1,2000,1E3]),maxfev=1.5E3)[0]

res_Excluding_China = Excluding_China_deaths-logistic(x_dates,*Excluding_China_curve)
ss_res_Excluding_China = np.sum(res_Excluding_China**2)
ss_tot_Excluding_China = np.sum((Excluding_China_deaths-np.mean(Excluding_China_deaths))**2)
r_2_Excluding_China = 1 - ss_res_Excluding_China/ss_tot_Excluding_China


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.plot(date_list,Excluding_China_deaths,frmt)
plt.plot(x,logistic(x,*Excluding_China_curve))
plt.suptitle('All Except China Deaths')
plt.show()
print('Excluding China R^2 = {:.4f}'.format(r_2_Excluding_China))
print('{:.0f} people with a turnaround at {:.1f} days and a growth rate of {:.4f}'.format(round(Excluding_China_curve[0],-2),Excluding_China_curve[2],Excluding_China_curve[1]))
plt.clf()


SK_curve = curve_fit(logistic,x_dates,SK_deaths,p0=[1E2,0.2,50,1],bounds=(0,[2E8,1E1,1000,1E3]),maxfev=2E3)[0]

res_SK = SK_deaths-logistic(x_dates,*SK_curve)
ss_res_SK = np.sum(res_SK**2)
ss_tot_SK = np.sum((SK_deaths-np.mean(SK_deaths))**2)
r_2_SK = 1 - ss_res_SK/ss_tot_SK


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])

plt.plot(date_list,SK_deaths,frmt)
plt.plot(x,logistic(x,*SK_curve))
plt.suptitle('South Korea Deaths')
plt.show()
print('{:.0f} people with a turnaround at {:.1f} days and a growth rate of {:.4f}'.format(round(SK_curve[0],0),SK_curve[2],SK_curve[1]))
print('S. Korea R^2 = {:.4f}'.format(r_2_SK))
plt.clf()


if np.any(US_cases<=0):
    US_cases[US_cases<=0] = 1E-9
    US_death_rate = US_deaths/US_cases*100
else:
    US_death_rate = US_deaths/US_cases*100

if np.any(Italy_cases<=0):
    Italy_cases[Italy_cases<=0] = 1E-9
    Italy_death_rate = Italy_deaths/Italy_cases*100
else:
    Italy_death_rate = Italy_deaths/Italy_cases*100

if np.any(China_cases<=0):
    China_cases[China_cases<=0] = 1E-9
    China_death_rate = China_deaths/China_cases*100
else:
    China_death_rate = China_deaths/China_cases*100

if np.any(Excluding_China_cases<=0):
    Excluding_China_cases[Excluding_China_cases<=0] = 1E-9
    Excluding_China_death_rate = Excluding_China_deaths/Excluding_China_cases*100
else:
    Ex_China_death_rate = Excluding_China_deaths/Excluding_China_cases*100

if np.any(SK_cases<=0):
    SK_cases[SK_cases<=0] = 1E-9
    SK_death_rate = SK_deaths/SK_cases*100
else:
    SK_death_rate = SK_deaths/SK_cases*100

if np.any(All_cases<=0):
    All_cases[All_cases<=0] = 1E-9
    All_death_rate = All_deaths/All_cases*100
else:
    All_death_rate = All_deaths/All_cases*100


plt.suptitle('Death Rates (%)')
plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_labels[::7])
plt.plot(date_list,US_death_rate,label='US')
plt.plot(date_list,Italy_death_rate,label='Italy')
plt.plot(date_list,China_death_rate,label='China')
plt.plot(date_list,Ex_China_death_rate,label='All but China')
plt.plot(date_list,SK_death_rate,label='S. Korea')
plt.plot(date_list,All_death_rate,label='All')
plt.legend()
plt.show()
plt.clf()


US_first_index = np.where(US_deaths != 0)[0][0]
Italy_first_index = np.where(Italy_deaths != 0)[0][0]
China_first_index = np.where(China_deaths != 0)[0][0]
Ex_China_first_index = np.where(Excluding_China_deaths != 0)[0][0]
SK_first_index = np.where(SK_deaths != 0)[0][0]
All_first_index = np.where(All_deaths != 0)[0][0]



print('\n\n')

'''Past Max Deaths'''

#US_death_changes = []
#Italy_death_changes = []
#All_death_changes = []

'''Updated as of 4/5/2020'''

US_death_changes = [[-np.inf, [98.7237310559845, 0.3793142964424308, 71.9935826125186, 0.9998163419023771]],[-np.inf, [98.69225321149356, 0.3806722446953549, 72.28871204898537, 0.9998139754062078]],[-np.inf, [98.66035280586722, 0.38204191187143, 72.58764300741211, 0.9998113644273816]],[-np.inf, [98.57756283845339, 0.3992005223136552, 73.3647296727886, 0.9997926749565391]],[-np.inf, [98.54358126143673, 0.40070893373944483, 73.68275979879455, 0.9997892858139314]],[-np.inf, [98.50873631011898, 0.40219928922284104, 74.00859432546524, 0.9997854809974946]],[-np.inf, [98.47292836099417, 0.4036632014649548, 74.34310046557346, 0.9997811696743244]],[-np.inf, [98.43606833670526, 0.4050926562378442, 74.68703352759196, 0.9997762375856424]],[-np.inf, [98.39807284477861, 0.40647974229663875, 75.04107676744118, 0.9997705433706212]],[-np.inf, [98.30866436449503, 0.4245384901998716, 75.87772833262153, 0.9997471872193909]],[-np.inf, [98.26741162403435, 0.42596387458760965, 76.26087556776649, 0.9997392553133945]],[-np.inf, [98.22475683943203, 0.4273200716289744, 76.65619389757835, 0.9997299058510433]],[-np.inf, [98.1806054943192, 0.4285971035309417, 77.0643576569155, 0.999718813013996]],[-np.inf, [98.13485320386383, 0.429784054061204, 77.48609115415586, 0.9997055766398625]],[-np.inf, [98.03806954735833, 0.4483616455811825, 78.3857595464313, 0.9996722111867805]],[-np.inf, [97.98802821750327, 0.44946914941013055, 78.8438691136531, 0.9996529673126235]],[-np.inf, [97.9359647205876, 0.45044225188787235, 79.31838594098019, 0.9996297563576438]],[-np.inf, [97.88169993506781, 0.4512632436185566, 79.81046438358402, 0.999601679613708]],[-np.inf, [97.82502442029298, 0.4519119695381961, 80.3214394161366, 0.9995676366577287]],[0.9999999999999962, [7910.773352134051, 15.068385432721017, 38.54026945166931, 0.907007245335799]],[1.0, [1.0000000000021452, 46.05068238224219, 37.41544246861426, 0.67837987251076]],[0.9832914132055989, [6265732.459313884, 2.206408620681225, 49.11141573194017, 1.450017992189407]],[0.9925426986528889, [7.000000004406255, 148.87574122017932, 40.1049014910482, 97.8403863914952]],[0.9803514954146098, [17.118933270011894, 0.5060266951323169, 17.862966911034693, 1.0621809684053856e-05]],[0.9878473862208974, [14.228026936311528, 0.6420563142854226, 35.7932765646599, 0.060367194486478364]],[0.9916082270281644, [15.868342498679475, 0.5336585992344975, 14.779158582660791, 1.189751250086989e-06]],[0.9918418344707762, [19.997365004985618, 0.3909345454468749, 5.371016466460455, 9.035069322301815e-07]],[0.9907685414561012, [29.615615950603782, 0.2591241989669465, 7.23562709471758, 0.00010934118934690924]],[0.9931896864489347, [30.20350151394994, 0.25444451959271436, 4.97913418374538, 7.102439168261184e-05]],[0.9917771944936461, [45.89493583608709, 0.17893396299881195, 1.1356111465857484, 0.00041245186377656344]],[0.9891774731239253, [132.10673258503087, 0.10050945584455984, 1.0253224056572878e-09, 0.00529894473232962]],[0.9921147481240667, [178.21866465537406, 0.08932388509640159, 2.7238381603783165e-10, 0.007581872984059976]],[0.9941072417809841, [255.76438915779997, 0.07845519681700458, 1.3955845264516871e-11, 0.010603238638906623]],[0.9956205857858752, [318.5221636587392, 0.0728954949704262, 7.152839910332708e-11, 0.012516028667733839]],[0.9966070555507824, [452.0165225098686, 0.06528573492039165, 8.088022998671406e-11, 0.015584953720212371]],[0.9932966230620728, [34206.88357044438, 0.029482251290517788, 5.52245340616862e-12, 0.03056826746954321]],[0.9933649550275911, [6013555.730604793, 0.26553727452468684, 111.42515538014091, 1.3658016547993912]],[0.9947832435876176, [128063565.08351381, 0.01644262454334292, 30.351606563921923, 0.036345665296931805]],[0.9802631508131963, [9923.885883029847, 0.8642808871725364, 74.56629133744254, 3.774013091231466]],[0.9871365195792484, [6006720.632773004, 0.5005274098646858, 99.67056540069161, 2.0565350981123154]],[0.9921634337765756, [10692.139302719681, 0.9663159208248266, 73.44572333665921, 3.925090962170469]],[0.9947893840192771, [12902.783419337826, 1.0770947957596115, 73.419080999408, 4.183953887940575]],[0.9965750783481605, [60524.7100159399, 0.8616930966008809, 78.61233628253541, 3.224834478950167]],[0.997977955801893, [714.8414972298247, 14.972295904109727, 62.00059547722159, 56.03291684369389]],[0.998760924114495, [7401454.943066438, 0.4530238496919519, 96.43914445966318, 1.6877622419303917]],[0.9992699448880774, [1224.6549661268082, 14.714649929377579, 64.00164201938745, 54.820143945830246]],[0.9995588031201503, [4770.0873849943155, 0.9381911218434817, 69.1169329632259, 3.514905147961536]],[0.999736889838511, [2914.018805111639, 1.5269543732574198, 67.27478697844407, 5.723304205287398]],[0.9998352001736743, [2832.56101086372, 1.6240485714345714, 67.17074917350514, 6.089237722103218]],[0.9998452071890159, [4149.311975160473, 0.6990620785664299, 68.4365183322893, 2.5711880445600124]],[0.9993495323204059, [98883.32826501546, 0.10369786493560391, 74.56728430414373, 0.31448378585545816]],[0.9995755655791217, [433036.9398488816, 0.06710565592722333, 72.82907204178687, 0.17561607272254992]],[0.9997093263606349, [24975815.645053495, 0.028271534425389818, 24.84225076370654, 0.02873838923233966]],[0.9997586318373715, [75802.33426831168, 0.13054349091442338, 76.69580244398115, 0.4421675123964242]],[0.9998186467115349, [23020.83726401049, 0.2632608859342908, 75.1371493007352, 1.0081496918615431]],[0.9998540089067091, [14725.333289143928, 0.4240775448728312, 74.16150540556308, 1.7171260218843538]]]
Italy_death_changes = [[-np.inf, [97.51899466149526, 0.38162541837181774, 63.77471998857947, 0.9864407474072062]],[-np.inf, [97.34097797504572, 0.3917835645198172, 65.47167752510296, 0.985381427673471]],[-np.inf, [97.29936806983093, 0.3917733808005717, 65.85567101126938, 0.9853596772624372]],[-np.inf, [97.25570829018552, 0.3916399804273662, 66.25496902045587, 0.985343638872982]],[-np.inf, [97.20958251668034, 0.3913565029125317, 66.6722944354582, 0.985333862237521]],[-np.inf, [97.02222447233825, 0.40103067331418935, 68.43834890948426, 0.9842909231069962]],[-np.inf, [96.96830652027697, 0.4003889181160665, 68.91372486392251, 0.9842897586405225]],[-np.inf, [96.90985578747383, 0.3994711970968387, 69.4202254324952, 0.984295341020125]],[-np.inf, [96.845768254592, 0.3982121400589943, 69.96459318651243, 0.9843068806390791]],[-np.inf, [96.77461208635901, 0.39652900040653744, 70.55542748369308, 0.9843225348874971]],[-np.inf, [96.55600852238854, 0.4045189057880265, 72.53424572429836, 0.9832933322261367]],[0.9999999999999997, [605.710156948052, 4.58819271221416, 30.289371809399945, 0.24394900180306436]],[0.9999978016445767, [2.199960478771426, 2.1135612569345277, 22.493892116372265, 1.63398161132896e-07]],[0.9974404001084075, [3.8761961444296453, 0.8516215663811592, 15.359560628707875, 2.633126313870273e-06]],[0.9913069836105689, [1973921.0795928, 1.0300873131806079, 50.08128512298034, 1.4010543639898532]],[0.9965859452417405, [10.0051113560808, 9.999999999999991, 33.49730457109029, 13.597891384654075]],[0.9974690601625068, [12.693855174413752, 1.4724093345128928, 33.54080669584217, 1.8334109973871273]],[0.9951029940787182, [38.76353329372271, 0.2534771646901412, 0.011633391218712501, 0.00012883848653227797]],[0.99698447256208, [48.588223718956115, 0.22189056380220523, 0.8171733111847734, 0.00038521237919306856]],[0.996109254676059, [158.4180548684154, 0.12959420320879883, 6.373171259145771e-10, 0.004197529581953188]],[0.9975133675737617, [129.75399240074492, 0.13997924479524892, 1.6882596232838022e-10, 0.0031829436385330512]],[0.9932643995040236, [42522.90850332221, 0.04323728628461144, 2.412190724344814e-10, 0.024198784545703927]],[0.9933846201700006, [4733080.534397827, 0.5109958483755627, 74.12913995484945, 1.5337134988088017]],[0.9966207980313019, [7366724.443090605, 0.536479393132711, 75.2599930060456, 1.6015116997711036]],[0.998258122665835, [155.48845809445962, 9.999514869075849, 43.12132175621176, 29.850796250367544]],[0.9990602902332485, [234.00252764428328, 2.244214196249375, 44.34580263259506, 6.706730431396445]],[0.9994243632926376, [247.11752019517246, 1.8772000026154338, 44.499171414294906, 5.599588493230516]],[0.9954529687024529, [1710141.5976804711, 0.5505458912745865, 73.26037606224048, 1.7695504163279863]],[0.9974552060580302, [467.00537196042586, 9.999999940006138, 46.88569083649636, 32.141893700943356]],[0.9984759779916058, [99999999.98963968, 0.04997293827529479, 76.71481485656513, 0.13766243007044035]],[0.9991259736223513, [1594.1664100840064, 0.8831534774790929, 50.96308145493653, 2.8906108642081487]],[0.9993598382504066, [830.2169836450794, 9.999999999999998, 48.89724270379161, 33.153910636312034]],[0.9912155481631659, [260495.9692308254, 0.04381695237892065, 5.923162365274672e-09, 0.018934440588576854]],[0.9940708924150008, [11771.977099802138, 0.11829089784627744, 48.745733786824424, 0.2481931488717818]],[0.9960971458439155, [96474.83341566946, 0.05073250192838266, 3.2267434375930076e-08, 0.016510192006857095]],[0.9973913823843288, [54151.85415556477, 0.06172675834208998, 26.457374708861533, 0.0520917849668925]],[0.9981252879184663, [9203.68163096511, 0.15663927744217412, 53.0413725580028, 0.42531765216565787]],[0.9986704044156418, [17126.31487683862, 0.10387761929643388, 48.17035761256472, 0.20938035434548127]],[0.999038704635123, [12668.188622197933, 0.1268802617335844, 51.462321563012914, 0.30666660248388355]],[0.9992145536938449, [44880.87962635455, 0.058991138515575844, 6.023383999214738e-10, 0.01329192524910271]],[0.9991253464830562, [99144.09431098192, 0.04869998741834396, 2.791584129386694e-12, 0.01807873147288457]],[0.999359609368081, [105715.90988854092, 0.04801279289731756, 2.4009216507421813e-12, 0.01842668026537402]],[0.999411067559747, [69495.0206732511, 0.053142988502132664, 2.322976783265282e-09, 0.015814150959563778]],[0.9995166454201798, [31150.156703342724, 0.0857007824409827, 48.48619914488588, 0.18047960174027824]],[0.9995917078123568, [19933.660832651578, 0.12156731910471255, 56.13616399860104, 0.371125641492591]],[0.9996689270678158, [17418.667218749186, 0.13850594535796845, 57.667017709760835, 0.4645546392169898]],[0.9997048783642162, [21920.918818848255, 0.11011746462597416, 54.28827433021089, 0.3040155666601386]],[0.9997361682970617, [27409.360001929603, 0.08963265238181992, 48.41680507115792, 0.185711572844875]],[0.9997844296150444, [27130.18811166002, 0.09047648503387869, 48.78468180234534, 0.19072430993285128]],[0.9998216426950441, [26738.79878352355, 0.09175998674741388, 49.339371160252206, 0.19860001566599514]],[0.9998509370000348, [27033.89898585354, 0.0907375428260421, 48.88197867000511, 0.1921225158428565]],[0.9998710167679334, [25897.38435809724, 0.09506543475382044, 50.74878299617131, 0.2204440360183951]],[0.9998886824000962, [25325.56487690441, 0.0975762348186633, 51.7151015418768, 0.23741706668284376]],[0.9999041098197146, [25303.60139766906, 0.09768124357841294, 51.75481704280742, 0.23814927316984316]],[0.9999160358961506, [25016.17373300483, 0.0991552082437261, 52.314529238674844, 0.24874217091585002]],[0.9999149816267839, [23996.735664907734, 0.10515863362557729, 54.346285862806724, 0.2932314476910102]]]
All_death_changes = [[0.9985805288171755, [2441.121615193211, 0.10831251279555637, 1.0253896039139566e-12, 0.13470121803672766]],[0.9988013256929518, [2634.772763734582, 0.10426326616151864, 1.5541369712402363e-15, 0.1345266639009584]],[0.9980741074902135, [1847.0475882426636, 0.14991792223214168, 9.451309102379298, 0.3449445858702918]],[0.9960302897449259, [2902.627825834061, 0.0984248294362156, 4.649466145666215e-13, 0.13552399696594705]],[0.9953522566210278, [3975.456740830674, 0.08427615891769537, 8.699373370611345e-14, 0.1344493915169705]],[0.9956944767823306, [5069.557964790842, 0.07565990668328132, 3.380397516129407e-13, 0.13234322843999488]],[0.9964736267583767, [5286.99300385644, 0.07430780577573404, 2.0303290982278215e-14, 0.13193961997444922]],[0.9970188653698282, [4987.978472053045, 0.0762714363258202, 3.5573788525510275e-16, 0.1323748832498829]],[0.9974987212469275, [4929.524320597946, 0.07669945008961461, 6.026418779915219e-14, 0.13242627017157307]],[0.9978612499632702, [4805.722693210464, 0.07768021508705604, 3.8440979687086204e-17, 0.13245667644886255]],[0.9981626293676409, [4738.919816062073, 0.07825491706062104, 6.617505854867252e-14, 0.13242249765163264]],[0.9978075554597797, [4075.711479546525, 0.08887928506350487, 4.825340424873441, 0.18087350084074957]],[0.9980748996173858, [4298.426838054801, 0.08275812922956317, 0.11570334300522792, 0.13262151164115601]],[0.9981108579143756, [3696.430345401392, 0.10323316042754858, 11.631792264615184, 0.29887977680476696]],[0.9983089727610095, [3811.7041990601974, 0.09820949622608442, 9.707207016916627, 0.25694200371773485]],[0.9984834342555291, [3820.233109472011, 0.09784507105520382, 9.546566657872875, 0.25383685443546034]],[0.9986183414487576, [3743.3843018102416, 0.10139811790237724, 11.045983246750225, 0.28481826863729937]],[0.9986987781687929, [3617.3593110079228, 0.10821772086334637, 13.431444068378129, 0.3457315016128816]],[0.9987777779841269, [3536.9654648213277, 0.1133779690266364, 14.905923087398557, 0.39290792870363167]],[0.9988670581027722, [3510.5049040085223, 0.11528551605963931, 15.3996307903985, 0.41071929778660826]],[0.9989468714243653, [3496.8175048361163, 0.11634718969341412, 15.66780450574254, 0.4208280301023334]],[0.999004303984565, [3537.2918035462058, 0.11313582400756025, 14.80351023704971, 0.3896914548497148]],[0.999034161628855, [3594.858066857226, 0.10871834950044608, 13.405252076738261, 0.34612494762955925]],[0.9989998373423377, [3686.1773244033693, 0.10219859775572059, 10.776367345910906, 0.2807569852932225]],[0.9989082158969798, [3803.4872204016497, 0.09472056322014843, 6.502220242338141, 0.20455914630637037]],[0.998715726919586, [3946.18941819675, 0.08719159978842553, 2.3478371084379585e-13, 0.13038057301199987]],[0.99846887885919, [4023.576467927718, 0.0853250367434794, 1.4424801552802386e-12, 0.13249094563981995]],[0.9973015937412729, [4182.339632309566, 0.0817319416330765, 4.816332007745582e-14, 0.13661456663660682]],[0.9957077228049641, [4389.730917974429, 0.07753540487493592, 5.399466002496991e-14, 0.14142625010801776]],[0.9930239651170291, [4703.964671095617, 0.07211744261028737, 1.343253905006058e-12, 0.1474830289192148]],[0.9887598772454135, [5215.739428960575, 0.06518515159400609, 1.6434653193430376e-13, 0.15462812427943673]],[0.9865558923230114, [5761.5091521259465, 0.05959062857915965, 2.797993698089983e-13, 0.15958318185941117]],[0.9796016619668371, [7144.920101300681, 0.05021902999225862, 1.829285456093537e-12, 0.1651326286214357]],[0.9740115327990021, [9888.242951607597, 0.04063875306546002, 5.5023767981450305e-12, 0.16496288658988356]],[0.9684538693475018, [18629.823900006122, 0.029777217529159666, 1.4161803049233861e-11, 0.1530905247135692]],[0.9643900344874244, [89163.32560802223, 0.018147067640433567, 9.123862790834321e-11, 0.11893011264110111]],[0.9623795521901269, [337643411.1285664, 0.006070085472491189, 4.105591060214897e-07, 0.05000128997873998]],[0.9623203955590673, [675480.5333638964, 0.21560932807796082, 136.13788730348207, 3.854532686187201]],[0.9608745717901968, [624430.7093057578, 0.2922103505119024, 130.25205014748536, 4.975780315806735]],[0.9576764074863606, [178145.43458662453, 0.45671035222531087, 104.93825023188784, 7.313172919473729]],[0.9540997105305382, [741457.0038132004, 0.33080156666578037, 121.87269605738172, 4.920149487634838]],[0.9531283437851188, [1444345.0938990125, 0.4510599796824175, 125.46821558709212, 6.207549585511267]],[0.9547886101669156, [781169.5420242513, 0.43737425466965985, 111.9868186816432, 5.572262812226327]],[0.9583079818400132, [591383.811638343, 0.594672020099732, 104.39103985238866, 7.038854055622517]],[0.9626323318817082, [845975.0911993327, 0.600659117935123, 104.87393498667821, 6.628601665847495]],[0.9676267541589613, [594169.3618471823, 0.6805732675034216, 98.24374844220152, 7.066820447837202]],[0.9726132896811783, [647728.5246965118, 0.537683900453944, 96.96112716696605, 5.299981742398199]],[0.9774346375810761, [681644.6662727015, 0.8699808083760118, 95.89604227791365, 8.239284864531824]],[0.981953189589415, [561441.0102753865, 0.612726295630406, 93.28591080867604, 5.676502784659741]],[0.9857008527394038, [1481008.4952073896, 0.49966421235973885, 101.81782155105157, 4.579815920844417]],[0.9886778890697209, [1424481.1253760185, 0.5290073609389071, 101.12296682436079, 4.808725130337263]],[0.991037809200751, [1321883.302689912, 0.5353025217210955, 100.31350072055267, 4.849730823191397]],[0.992889379638105, [154628.88026917865, 1.3369650018195984, 80.73720823361927, 12.023480166265609]],[0.9943703875822553, [167641.00530314472, 1.3195395159805048, 81.43270122094937, 11.84641449406576]],[0.9955051139477294, [64858.12876574562, 9.735315873585632, 72.90727821222661, 87.40060731351147]],[0.9963446889825895, [71365.64861755053, 1.9204766871605252, 73.76670645353609, 17.244635990935777]]]

ndays = 20


for i in range(ndays+len(US_death_changes),len(x_dates)+1):
    print(i)
    US_max_r = []
    US_max_peak = []
    
    All_max_r = []
    All_max_peak = []
    
    Italy_max_r = []
    Italy_max_peak = []
    
    for j in range(int(2E1),int(7E1)+1,1):
#        if j%1E1 ==0:
#            print(10**(j/1E1))
#        print(10**(j/1E1))
        try:
            US_max_r.append(r_sqr(x_dates[:i],US_deaths[:i],logistic,[10**(j/1E1),0.2,60,1],(0,[3.5E8,1E3,1E3,1E3]),1E4))
        except:
            None
        try:
            All_max_r.append(r_sqr(x_dates[:i],All_deaths[:i],logistic,[10**(j/1E1),0.4,20,1],(0,[2E9,1E3,1E3,1E3]),1E4))
        except:
            None
        try:
            Italy_max_r.append(r_sqr(x_dates[:i],Italy_deaths[:i],logistic,[10**(j/1E1),0.25,40,1],(0,[1E8,1E1,1E3,1E3]),1E4))
        except:
            None
    
    US_death_changes.append(US_max_r[np.where(np.array(US_max_r)[:,0] == max(np.array(US_max_r)[:,0]))[0][0]])
    All_death_changes.append(All_max_r[np.where(np.array(All_max_r)[:,0] == max(np.array(All_max_r)[:,0]))[0][0]])
    Italy_death_changes.append(Italy_max_r[np.where(np.array(Italy_max_r)[:,0] == max(np.array(Italy_max_r)[:,0]))[0][0]])
    


US_r_2_chgs = []
All_r_2_chgs = []
Italy_r_2_chgs = []

US_amp_chgs = []
All_amp_chgs = []
Italy_amp_chgs = []



#fn_peak(logistic,[x,b,d,e,f],[*US_list_changes[j]],8E1)

for j in range(len(US_death_changes)):
    US_r_2_chgs.append(US_death_changes[j][0])
    US_amp_chgs.append(US_death_changes[j][1][0])
    
    All_r_2_chgs.append(All_death_changes[j][0])
    All_amp_chgs.append(All_death_changes[j][1][0])
    
    Italy_r_2_chgs.append(Italy_death_changes[j][0])
    Italy_amp_chgs.append(Italy_death_changes[j][1][0])
    

plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_graph[ndays::7])
plt.plot(dates_graph[ndays-1:],US_r_2_chgs)
#plt.plot(x_dates[4:],US_r_2_chgs,frmt)
plt.suptitle('US Deaths R^2')
plt.show()
plt.clf()

plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_graph[ndays::7])
plt.plot(dates_graph[ndays-1:],US_amp_chgs)
#plt.plot(x_dates[4:],US_amp_chgs,frmt)
plt.suptitle('US Max Deaths')
plt.yscale('log')
plt.show()
plt.clf()


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_graph[ndays::7])
plt.plot(dates_graph[ndays-1:],Italy_r_2_chgs)
#plt.plot(x_dates[4:],Italy_r_2_chgs,frmt)
plt.suptitle('Italy Deaths R^2')
plt.show()
plt.clf()

plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_graph[ndays::7])
plt.plot(dates_graph[ndays-1:],Italy_amp_chgs)
#plt.plot(x_dates[4:],Italy_amp_chgs,frmt)
plt.suptitle('Italy Max Deaths')
plt.yscale('log')
plt.show()
plt.clf()


plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_graph[ndays::7])
plt.plot(dates_graph[ndays-1:],All_r_2_chgs)
#plt.plot(x_dates[4:],All_r_2_chgs,frmt)
plt.suptitle('All Deaths R^2')
plt.show()
plt.clf()

plt.xticks(rotation=45)
plt.xticks(ticks=np.arange(0,len(dates_graph)*extn+1,7),labels=dates_graph[ndays::7])
plt.plot(dates_graph[ndays-1:],All_amp_chgs)
#plt.plot(x_dates[4:],All_amp_chgs,frmt)
plt.suptitle('All Max Deaths')
plt.yscale('log')
plt.show()
plt.clf()

print('\n\n')




print('\nCurrent Death Rate in US: {:.2f}%\n'.format(US_death_rate[-1]))
print('Current Death Rate in Italy: {:.2f}%\n'.format(Italy_death_rate[-1]))
print('Current Death Rate in China: {:.2f}%\n'.format(China_death_rate[-1]))
print('Current Death Rate Everywhere but China: {:.2f}%\n'.format(Ex_China_death_rate[-1]))
print('Current Death Rate in S. Korea: {:.2f}%\n'.format(SK_death_rate[-1]))
print('Current Death Rate in Total: {:.2f}%\n'.format(All_death_rate[-1]))

print('\n\n\n')
print('Deaths in Italy = {} on {}'.format(int(Italy_deaths[-1]),date_list[-1]))
print('Deaths in the US = {} on {}'.format(int(US_deaths[-1]),date_list[-1]))
print('\n\n')
